rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User profiles - users can read all profiles but only edit their own
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Locations - authenticated users can read all locations and create new ones
    // Users can only update or delete their own locations
    match /locations/{locationId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource.data.createdBy == request.auth.uid;
      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }
    
    // Ratings - authenticated users can read all ratings
    // Users can only create, update, or delete their own ratings
    match /ratings/{ratingId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Saved Locations - users can only read, create, update, or delete their own saved locations
    match /savedLocations/{savedId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Playlists - users can read public playlists, but only read/write their own private playlists
    match /playlists/{playlistId} {
      allow read: if request.auth != null && (resource.data.visibility == 'public' || resource.data.createdBy == request.auth.uid);
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid;
      allow update: if request.auth != null && resource.data.createdBy == request.auth.uid;
      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }
    
    // Comments - authenticated users can read all comments
    // Users can only create, update, or delete their own comments
    match /comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid;
      allow update: if request.auth != null && resource.data.createdBy == request.auth.uid;
      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }
    
    // Chat messages - authenticated users can read all chat messages
    // Users can only create, update, or delete their own chat messages
    match /chat/{messageId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Forum posts - authenticated users can read all forum posts
    // Users can only create, update, or delete their own forum posts
    match /forum/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid;
      allow update: if request.auth != null && resource.data.createdBy == request.auth.uid;
      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }
    
    // Territories - authenticated users can read all territories
    // Users can only create, update, or delete territories they own
    match /territories/{territoryId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      allow update: if request.auth != null && resource.data.ownerId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.ownerId == request.auth.uid;
    }
    
    // Crews - authenticated users can read all crews
    // Users can only create, update, or delete crews they own
    match /crews/{crewId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      allow update: if request.auth != null && resource.data.ownerId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.ownerId == request.auth.uid;
    }
    
    // Crew members - authenticated users can read all crew members
    // Users can only create, update, or delete their own crew membership
    match /crewMembers/{membershipId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Geocaches - authenticated users can read all geocaches
    // Users can only create, update, or delete geocaches they own
    match /geocaches/{geocacheId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid;
      allow update: if request.auth != null && resource.data.createdBy == request.auth.uid;
      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }
  }
}
